import { Appointment } from "./backend/Models/sample"

AddDoctor


// import React,{useState} from 'react'
// import AdminHeader from '../components/AdminHeader'


// const AddDoctor = () => {
//   const [doctorName,setdoctoreName]=useState("");
//   const [mailid,setmailid]=useState("");
//   const [contact,setcontact]=useState("")
//   const [dutydays,setdutydays]=useState([])
//   const [timeSlots, setTimeSlots] = useState([{ startTime: '', endTime: '' }]);
//   const [image, setImage] = useState(null);
//   const [error,setError]=useState('')


//   const handleCheckboxChange = (day) => {
//     setdutydays((prev) =>
//       prev.includes(day) ? prev.filter((d) => d !== day) : [...prev, day]
//     );
//   };

//   const addTimeSlot = () => {
//     setTimeSlots([...timeSlots, { start_time: '', end_time: '' }]);
//   };

//   const handleImageChange = (e) => {
//     setImage(e.target.files[0]);
//   };

//   const handleTimeChange = (index, field, value) => {
//     const updatedTimeSlots = [...timeSlots];
//     updatedTimeSlots[index][field] = value;
//     setTimeSlots(updatedTimeSlots);
//   };

//   const handleSubmit = async (e) =>
//     {
//       e.preventDefault();
//       try{
//         const formData=new FormData();
//         formData.append("doctor_name",doctorName);
//         formData.append("email",mailid);
//         formData.append("contact",contact);
//         formData.append('working_days', JSON.stringify(dutydays));
//         formData.append('time_schedules', JSON.stringify(timeSlots));  // Convert array to JSON
//         if (image) 
//           {
//           formData.append('magePath', image);
//         }
  
//         const res =await fetch("/api/add_doctor",{
//           method: "POST",
//           credentials: "include",
//           body:formData,
//         })
//         if(!res.ok)
//         {
//           throw new Error("Error add doctors")
//         }
//         alert("doctor added Successfully")
//         setdoctoreName("")
//         setmailid("")
//         setcontact("")
//         setdutydays([])
//         setTimeSlots([{ start_time: '', end_time: '' }]);
//         setImage(null)
//       }
//       catch(error)
//       {
//         console.log(error)
//         alert("Internal Server error")
//       }
//     }


//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//       <AdminHeader/>
//       <div className="p-4">
//         <div className=" md:h-[78vh] bg-[#ffffff] border border-cyan-300 rounded-lg p-4">
//             <h1 className="text-2xl font-bold text-center">Add Doctor</h1>
//             <form onSubmit={handleSubmit} className="m-4 md:mt-[20px] md:px-[100px]">
//                 <div className="flex justify-between mb-[10px] ">
//                     <label className="text-[10px] md:text-xl font-semibold text-center">Doctor Name</label>
//                     <input type="text" 
//                      value={doctorName}
//                      onChange={(e) => setdoctoreName(e.target.value)}
//                     className="w-[60%] md:w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300"/>
//                 </div>
//                 <div className="flex justify-between mb-[10px] ">
//                     <label className="text-[10px] md:text-xl font-semibold text-center">Email-ID</label>
//                     <input type="email" 
//                      value={mailid}
//                      onChange={(e) => setmailid(e.target.value)}
//                     className="w-[60%] md:w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300"/>
//                 </div>
//                 <div className="flex justify-between mb-[10px]">
//                     <label className="text-[10px] md:text-xl font-semibold text-center ">Contact</label>
//                     <input type="number"
//                      value={contact}
//                      onChange={(e) => setcontact(e.target.value)}
//                       className="w-[60%] md:w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300"/>
//                 </div>
//                 <div className="flex flex-col md:flex-row md:justify-between mb-[10px]">
//                     <label className="text-[13px] md:text-xl font-semibold text-center ">Duty Days</label>
//                     <div className="grid grid-cols-6 md:flex">
//                     {["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].map((day) => (
//                     <label key={day} className="ml-4">
//                       <input type="checkbox" checked={dutydays.includes(day)} onChange={() => handleCheckboxChange(day)} />
//                       {day}
//                     </label>
//                 ))}
//               </div>
//                 </div>
//                 <div className="flex flex-col md:flex-row md:justify-between mb-[10px]">
//                     <label className="text-[13px] md:text-xl font-semibold text-center ">Time Slot</label>
//                     <div>
//                 {timeSlots.map((slot, index) => (
//                   <div key={index} className="flex gap-2">
//                     <input type="time" value={slot.startTime} onChange={(e) => handleTimeChange(index, 'startTime', e.target.value)} />
//                     <input type="time" value={slot.endTime} onChange={(e) => handleTimeChange(index, 'endTime', e.target.value)} />
//                   </div>
//                 ))}
//                 <button type="button" className="text-cyan-600 underline" onClick={addTimeSlot}>
//                   + Add Time Slot
//                 </button>
//               </div>
//                 </div>
//                 <div className="flex justify-between mb-4">
//               <label className="text-[10px] md:text-xl font-semibold text-center">Upload Image</label>
//               <input type="file" accept="image/*" onChange={handleImageChange} />
//             </div>
//             <div className="flex justify-between md:mt-[50px]">
//               <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">Cancel</button>
//               <button type="submit" className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white">
//                 Add
//               </button>
//             </div>
//             </form>
//         </div>
//       </div>
//     </div>
//   )
// }

// export default AddDoctor

// import React, { useState } from 'react';
// import AdminHeader from '../components/AdminHeader';

// const AddDoctor = () => {
//     const [doctorName, setDoctorName] = useState('');
//     const [email, setEmail] = useState('');
//     const [contact, setContact] = useState('');
//     const [dutyDays, setDutyDays] = useState([]);
//     const [timeSlots, setTimeSlots] = useState([{ startTime: '', endTime: '' }]);
//     const [image, setImage] = useState(null);

//     const handleImageChange = (e) => {
//         setImage(e.target.files[0]);
//     };

//     const handleTimeSlotChange = (index, field, value) => {
//         const updatedSlots = [...timeSlots];
//         updatedSlots[index][field] = value;
//         setTimeSlots(updatedSlots);
//     };

//     const addTimeSlot = () => {
//         setTimeSlots([...timeSlots, { startTime: '', endTime: '' }]);
//     };

//     const removeTimeSlot = (index) => {
//         if (timeSlots.length > 1) {
//             setTimeSlots(timeSlots.filter((_, i) => i !== index));
//         }
//     };

//     const handleSubmit = async (e) => {
//         e.preventDefault();
        
//         const formData = new FormData();
//         formData.append('doctor_name', doctorName);
//         formData.append('email', email);
//         formData.append('contact', contact);
//         formData.append('working_days', JSON.stringify(dutyDays));
//         formData.append('time_schedules', JSON.stringify(timeSlots));  // Convert array to JSON
//         if (image) {
//             formData.append('imagePath', image);
//         }

//         try {
//             const response = await fetch('/api/add_doctor', {
//                 method: 'POST',
//                 body: formData,
//             });

//             if (response.ok) {
//                 alert('Doctor added successfully');
//                 setDoctorName('');
//                 setEmail('');
//                 setContact('');
//                 setDutyDays([]);
//                 setTimeSlots([{ startTime: '', endTime: '' }]);
//                 setImage(null);
//             } else {
//                 alert('Failed to add doctor');
//             }
//         } catch (error) {
//             console.error('Error adding doctor:', error);
//             alert('Error adding doctor');
//         }
//     };

//     const handleDutyDayChange = (day) => {
//         setDutyDays(prev => prev.includes(day) ? prev.filter(d => d !== day) : [...prev, day]);
//     };

//     return (
//         <div className="bg-[#0098B9] min-h-screen flex flex-col">
//             <AdminHeader />
//             <div className="p-4">
//                 <div className="md:h-[78vh] bg-white border border-cyan-300 rounded-lg p-4">
//                     <h1 className="text-2xl font-bold text-center">Add Doctor</h1>
//                     <form onSubmit={handleSubmit} className="m-4 md:mt-[20px] md:px-[100px]">
//                         <div className="mb-4 flex justify-between">
//                             <label className="text-xl font-semibold">Doctor Name</label>
//                             <input type="text" value={doctorName} onChange={(e) => setDoctorName(e.target.value)} className="w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300" required />
//                         </div>
//                         <div className="mb-4 flex justify-between">
//                             <label className="text-xl font-semibold">Email-ID</label>
//                             <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} className="w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300" required />
//                         </div>
//                         <div className="mb-4 flex justify-between">
//                             <label className="text-xl font-semibold">Contact</label>
//                             <input type="number" value={contact} onChange={(e) => setContact(e.target.value)} className="w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300" required />
//                         </div>

//                         <div className="mb-4">
//                             <label className="text-xl font-semibold">Duty Days</label>
//                             <div className="flex gap-4 mt-2">
//                                 {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day => (
//                                     <label key={day} className="flex items-center">
//                                         <input type="checkbox" checked={dutyDays.includes(day)} onChange={() => handleDutyDayChange(day)} className="h-5 w-5 text-cyan-500" />
//                                         <span className="ml-2">{day}</span>
//                                     </label>
//                                 ))}
//                             </div>
//                         </div>

//                         <div className="mb-4">
//                             <label className="text-xl font-semibold">Time Slots</label>
//                             {timeSlots.map((slot, index) => (
//                                 <div key={index} className="flex justify-between items-center mt-2">
//                                     <input type="time" value={slot.startTime} onChange={(e) => handleTimeSlotChange(index, 'startTime', e.target.value)} className="w-[40%] md:h-[40px] rounded-lg border-2 border-cyan-300" required />
//                                     <input type="time" value={slot.endTime} onChange={(e) => handleTimeSlotChange(index, 'endTime', e.target.value)} className="w-[40%] md:h-[40px] rounded-lg border-2 border-cyan-300" required />
//                                     {index > 0 && (
//                                         <button type="button" onClick={() => removeTimeSlot(index)} className="text-red-500 ml-2">✖</button>
//                                     )}
//                                 </div>
//                             ))}
//                             <button type="button" onClick={addTimeSlot} className="mt-2 text-cyan-600 underline">+ Add Time Slot</button>
//                         </div>

//                         <div className="mb-4">
//                             <label className="text-xl font-semibold">Upload Doctor Image</label>
//                             <input type="file" accept="image/*" onChange={handleImageChange} className="mt-2" required />
//                         </div>

//                         <div className="flex justify-between mt-6">
//                             <button type="button" className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">Cancel</button>
//                             <button type="submit" className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white">Add Doctor</button>
//                         </div>
//                     </form>
//                 </div>
//             </div>
//         </div>
//     );
// };

// export default AddDoctor;



book Appointment



// import React, { useState, useEffect } from "react";
// import Header from "../components/Header";
// import { Link } from "react-router-dom";

// const BookAppointment = () => {
//   const [date, setDate] = useState("");
//   const [doctors, setDoctors] = useState([]);
//   const [selectedDoctor, setSelectedDoctor] = useState("");
//   const [timeSlots, setTimeSlots] = useState([]);
//   const [selectedSlot, setSelectedSlot] = useState("");

//   // Fetch available doctors when date changes
//   useEffect(() => {
//     if (date) {
//       fetch(`/available_doctors?date=${date}`, {
//         headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
//       })
//         .then((res) => res.json())
//         .then((data) => setDoctors(data))
//         .catch((err) => console.error("Error fetching doctors:", err));
//     }
//   }, [date]);

//   // Fetch available slots when doctor and date change
//   useEffect(() => {
//     if (selectedDoctor && date) {
//       fetch(`/available_slots?doctor_name=${selectedDoctor}&date=${date}`, {
//         headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
//       })
//         .then((res) => res.json())
//         .then((data) => setTimeSlots(data))
//         .catch((err) => console.error("Error fetching slots:", err));
//     }
//   }, [selectedDoctor, date]);

//   // Submit appointment
//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const response = await fetch("/book_appointment", {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//         Authorization: `Bearer ${localStorage.getItem("token")}`,
//       },
//       body: JSON.stringify({ doctor_name: selectedDoctor, appointment_date: date, time_slot: selectedSlot }),
//     });

//     const data = await response.json();
//     if (response.ok) alert("Appointment booked successfully!");
//     else alert(data.msg);
//   };

//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//       <Header />
//       <div className="p-4">
//         <h1 className="text-white text-3xl hidden md:block">Welcome User</h1>

//         <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">

//           <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">Book an Appointment</h1>


//           <form onSubmit={handleSubmit} className="mt-[20px] md:px-[100px]">
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold">Date</label>
//               <input type="date" className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300" value={date} onChange={(e) => setDate(e.target.value)} required />
//             </div>
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold">Doctor Name</label>
//               <select className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300" value={selectedDoctor} onChange={(e) => setSelectedDoctor(e.target.value)} required>
//                 <option value="" disabled>Select Doctor</option>
//                 {doctors.length > 0 ? doctors.map((doc) => <option key={doc} value={doc}>{doc}</option>) : <option disabled>No doctors available</option>}
//               </select>
//             </div>
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold">Time Slots</label>
//               <select className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300" value={selectedSlot} onChange={(e) => setSelectedSlot(e.target.value)} required>
//                 <option value="" disabled>Select Time Slot</option>
//                 {timeSlots.length > 0 ? timeSlots.map((slot) => <option key={slot.start_time} value={`${slot.start_time} - ${slot.end_time}`}>{slot.start_time} - {slot.end_time}</option>) : <option disabled>No slots available</option>}
//               </select>
//             </div>
//             <div className="flex justify-between mt-[60px]">
//               <Link to="/home" className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">Cancel</Link>
//               <button type="submit" className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white">Confirm</button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default BookAppointment;





// import React from 'react'
// import Header from '../components/Header'
// import { Link } from 'react-router-dom'

// const BookAppointment = () => {
//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//         <Header/>
       
//         <div className="p-4">
//         <h1 className="text-white text-3xl hidden md:block">Welcome  User</h1>
//             <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">
//                 <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">Book an Appoinment</h1>
//                 <form className="mt-[20px] md:px-[100px]">
//                     <div className=" block md:flex md:justify-between mb-[10px] ">
//                         <label className="text-[20px] md:text-xl font-semibold text-center">Date</label>
//                         <input type="date" className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"/>
//                     </div>
//                     <div className=" block md:flex md:justify-between mb-[10px] ">
//                         <label className="text-[20px] md:text-xl font-semibold text-center">Doctor Name</label>
//                         <select className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300">
//                             <option name="Department" value="0" selected disabled>Select Doctor</option>
//                             <option name="Department" value="1">Dr. John Doe</option>
//                         </select>
//                     </div>
//                     <div className=" block md:flex md:justify-between mb-[10px] ">
//                         <label className="text-[20px] md:text-xl font-semibold text-center">Time slots</label>
//                         <select className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300">
//                             <option name="Department" value="0" selected disabled>Select Department</option>
//                             <option name="Department" value="1">9.00 AM to  9.30 AM</option>
//                         </select>
//                     </div>
//                     <div className="flex justify-between mt-[60px]">
//                         <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]"><Link href="/Home">Cancel</Link></button>
//                         <button className="bg-[#0098B9] py-2 px-8 rounded  border-4 border-white text-white">Confirm</button>
//                     </div>
//                 </form>
    
//             </div>
//         </div>
//     </div>
//   )
// }

// export default BookAppointment



// import React, { useState, useEffect } from "react";
// import Header from "../components/Header";
// import { Link } from "react-router-dom";

// const BookAppointment = () => {
//   const [date, setDate] = useState("");
//   const [doctors, setDoctors] = useState([]);
//   const [selectedDoctor, setSelectedDoctor] = useState("");
//   const [timeSlots, setTimeSlots] = useState([]);
//   const [selectedTimeSlot, setSelectedTimeSlot] = useState("");

//   // Fetch available doctors when date changes
//   useEffect(() => {
//     if (date) {
//       fetch(`/api/available_doctors?date=${date}`)
//         .then((res) => res.json())
//         .then((data) => setDoctors(data))
//         .catch((err) => console.error("Error fetching doctors:", err));
//     }
//   }, [date]);

//   // Fetch available slots when doctor changes
//   useEffect(() => {
//     if (selectedDoctor && date) {
//       fetch(`/api/available_slots?doctor_name=${selectedDoctor}&date=${date}`)
//         .then((res) => res.json())
//         .then((data) => setTimeSlots(data))
//         .catch((err) => console.error("Error fetching slots:", err));
//     }
//   }, [selectedDoctor, date]);

//   const handleConfirm = async (e) => {
//     e.preventDefault(); // Prevent page refresh

//     if (!date || !selectedDoctor || !selectedTimeSlot) {
//       alert("Please select a date, doctor, and time slot.");
//       return;
//     }

//     const appointmentData = {
//       date: date,
//       doctor_name: selectedDoctor,
//       time_slot: selectedTimeSlot,
//     };

//     try {
//       const response = await fetch("/api/book_appointment", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify(appointmentData),
//       });

//       const result = await response.json();
//       if (response.ok) {
//         alert("Appointment booked successfully!");
//       } else {
//         alert(`Failed to book appointment: ${result.message}`);
//       }
//     } catch (error) {
//       console.error("Error booking appointment:", error);
//       alert("An error occurred while booking. Please try again.");
//     }
//   };

//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//       <Header />
//       <div className="p-4">
//         <h1 className="text-white text-3xl hidden md:block">Welcome User</h1>
//         <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">
//           <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">
//             Book an Appointment
//           </h1>
//           <form className="mt-[20px] md:px-[100px]" onSubmit={handleConfirm}>
//             {/* Date Input */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Date
//               </label>
//               <input
//                 type="date"
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={date}
//                 onChange={(e) => setDate(e.target.value)}
//               />
//             </div>

//             {/* Doctor Selection */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Doctor Name
//               </label>
//               <select
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={selectedDoctor}
//                 onChange={(e) => setSelectedDoctor(e.target.value)}
//                 disabled={!doctors.length}
//               >
//                 <option value="" disabled>
//                   {doctors.length ? "Select Doctor" : "No doctors available"}
//                 </option>
//                 {doctors.map((doctor, index) => (
//                   <option key={index} value={doctor}>
//                     {doctor}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Time Slots Selection */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Time slots
//               </label>
//               <select
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={selectedTimeSlot}
//                 onChange={(e) => setSelectedTimeSlot(e.target.value)}
//                 disabled={!timeSlots.length}
//               >
//                 <option value="" disabled>
//                   {timeSlots.length ? "Select Time Slot" : "No slots available"}
//                 </option>
//                 {timeSlots.map((slot, index) => (
//                   <option key={index} value={slot}>
//                     {slot.start_time} - {slot.end_time}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Buttons */}
//             <div className="flex justify-between mt-[60px]">
//               <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">
//                 <Link to="/home">Cancel</Link>
//               </button>
//               <button
//                 type="submit"
//                 className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white"
//               >
//                 Confirm
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default BookAppointment;



// import React, { useState, useEffect } from "react";
// import Header from "../components/Header";
// import { Link } from "react-router-dom";

// const BookAppointment = () => {
//   const [date, setDate] = useState("");
//   const [doctors, setDoctors] = useState([]);
//   const [selectedDoctor, setSelectedDoctor] = useState("");
//   const [timeSlots, setTimeSlots] = useState([]);
//   const [selectedTimeSlot, setSelectedTimeSlot] = useState("");


//   // Fetch available doctors when date changes
//   useEffect(() => {
//     if (date) {
//       fetch(`/api/available_doctors?date=${date}`)
//         .then((res) => res.json())
//         .then((data) => setDoctors(data))
//         .catch((err) => console.error("Error fetching doctors:", err));
//     }
//   }, [date]);

//   // Fetch available slots when doctor changes
//   useEffect(() => {
//     if (selectedDoctor && date) {
//       fetch(`/api/available_slots?doctor_name=${selectedDoctor}&date=${date}`)
//         .then((res) => res.json())
//         .then((data) => setTimeSlots(data))
//         .catch((err) => console.error("Error fetching slots:", err));
//     }
//   }, [selectedDoctor, date]);


//   const handleConfirm = async (e) => {
//     e.preventDefault(); // Prevent page refresh
  
//     if (!date || !selectedDoctor || !selectedTimeSlot) {
//       alert("Please select a date, doctor, and time slot.");
//       return;
//     }
  
//     const appointmentData = {
//       date: date,
//       doctor_name: selectedDoctor,
//       time_slot: selectedTimeSlot,
//     };
  
//     try {
//       const response = await fetch("/api/book_appointment", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify(appointmentData),
//       });
  
//       const result = await response.json();
//       if (response.ok) {
//         alert("Appointment booked successfully!");
//       } else {
//         alert(`Failed to book appointment: ${result.message}`);
//       }
//     } catch (error) {
//       console.error("Error booking appointment:", error);
//       alert("An error occurred while booking. Please try again.");
//     }
//   };
  

//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//       <Header />
//       <div className="p-4">
//         <h1 className="text-white text-3xl hidden md:block">Welcome User</h1>
//         <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">
//           <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">
//             Book an Appointment
//           </h1>
//           <form className="mt-[20px] md:px-[100px]" onSubmit={handleConfirm}>
//             {/* Date Input */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Date
//               </label>
//               <input
//                 type="date"
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={date}
//                 onChange={(e) => setDate(e.target.value)}
//               />
//             </div>

//             {/* Doctor Selection */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Doctor Name
//               </label>
//               <select
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={selectedDoctor}
//                 onChange={(e) => setSelectedDoctor(e.target.value)}
//                 disabled={!doctors.length}
//               >
//                 <option value="" disabled>
//                   {doctors.length ? "Select Doctor" : "No doctors available"}
//                 </option>
//                 {doctors.map((doctor, index) => (
//                   <option key={index} value={doctor}>
//                     {doctor}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Time Slots Selection */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Time slots
//               </label>
//               <select
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 disabled={!timeSlots.length}
//               >
//                 <option value="" disabled>
//                   {timeSlots.length ? "Select Time Slot" : "No slots available"}
//                 </option>
//                 {timeSlots.map((slot, index) => (
//                   <option key={index} value={slot}>
//                     {slot.start_time} - {slot.end_time}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Buttons */}
//             <div className="flex justify-between mt-[60px]">
//               <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">
//                 <Link to="/home">Cancel</Link>
//               </button>
//               <button type="submit" className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white">
//                   Confirm
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default BookAppointment;







// import React, { useState, useEffect } from "react";
// import Header from "../components/Header";
// import { Link } from "react-router-dom";

// const BookAppointment = () => {
//   const [date, setDate] = useState("");
//   const [doctors, setDoctors] = useState([]);
//   const [selectedDoctor, setSelectedDoctor] = useState("");
//   const [timeSlots, setTimeSlots] = useState([]);
//   const [selectedTimeSlot, setSelectedTimeSlot] = useState("");


//   // Fetch available doctors when date changes
//   useEffect(() => {
//     if (date) {
//       fetch(`/api/available_doctors?date=${date}`)
//         .then((res) => res.json())
//         .then((data) => setDoctors(data))
//         .catch((err) => console.error("Error fetching doctors:", err));
//     }
//   }, [date]);

//   // Fetch available slots when doctor changes
//   useEffect(() => {
//     if (selectedDoctor && date) {
//       fetch(`/api/available_slots?doctor_name=${selectedDoctor}&date=${date}`)
//         .then((res) => res.json())
//         .then((data) => setTimeSlots(data))
//         .catch((err) => console.error("Error fetching slots:", err));
//     }
//   }, [selectedDoctor, date]);


//   const handleConfirm = async (e) => {
//     e.preventDefault(); // Prevent page refresh
  
//     if (!date || !selectedDoctor || !selectedTimeSlot) {
//       alert("Please select a date, doctor, and time slot.");
//       return;
//     }
  
//     const appointmentData = {
//       date: date,
//       doctor_name: selectedDoctor,
//       time_slot: selectedTimeSlot,
//     };
  
//     try {
//       const response = await fetch("/api/book_appointment", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify(appointmentData),
//       });
  
//       const result = await response.json();
//       if (response.ok) {
//         alert("Appointment booked successfully!");
//       } else {
//         alert(`Failed to book appointment: ${result.message}`);
//       }
//     } catch (error) {
//       console.error("Error booking appointment:", error);
//       alert("An error occurred while booking. Please try again.");
//     }
//   };
  

//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//       <Header />
//       <div className="p-4">
//         <h1 className="text-white text-3xl hidden md:block">Welcome User</h1>
//         <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">
//           <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">
//             Book an Appointment
//           </h1>
//           <form className="mt-[20px] md:px-[100px]" onSubmit={handleConfirm}>
//             {/* Date Input */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Date
//               </label>
//               <input
//                 type="date"
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={date}
//                 onChange={(e) => setDate(e.target.value)}
//               />
//             </div>

//             {/* Doctor Selection */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Doctor Name
//               </label>
//               <select
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 value={selectedDoctor}
//                 onChange={(e) => setSelectedDoctor(e.target.value)}
//                 disabled={!doctors.length}
//               >
//                 <option value="" disabled>
//                   {doctors.length ? "Select Doctor" : "No doctors available"}
//                 </option>
//                 {doctors.map((doctor, index) => (
//                   <option key={index} value={doctor}>
//                     {doctor}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Time Slots Selection */}
//             <div className="block md:flex md:justify-between mb-[10px]">
//               <label className="text-[20px] md:text-xl font-semibold text-center">
//                 Time slots
//               </label>
//               <select
//                 className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
//                 disabled={!timeSlots.length}
//               >
//                 <option value="" disabled>
//                   {timeSlots.length ? "Select Time Slot" : "No slots available"}
//                 </option>
//                 {timeSlots.map((slot, index) => (
//                   <option key={index} value={slot}>
//                     {slot.start_time} - {slot.end_time}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* Buttons */}
//             <div className="flex justify-between mt-[60px]">
//               <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">
//                 <Link to="/home">Cancel</Link>
//               </button>
//               <button type="submit" className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white">
//                   Confirm
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default BookAppointment;








import React, { useState, useEffect } from "react";
import Header from "../components/Header";
import { Link } from "react-router-dom";

const BookAppointment = () => {
  const [date, setDate] = useState("");
  const [doctors, setDoctors] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState("");
  const [timeSlots, setTimeSlots] = useState([]);
  const [selectedTimeSlot, setSelectedTimeSlot] = useState("");

  // Fetch available doctors when date changes
  useEffect(() => {
    if (date) {
      fetch(`/api/available_doctors?date=${date}`)
        .then((res) => res.json())
        .then((data) => setDoctors(data))
        .catch((err) => console.error("Error fetching doctors:", err));
    }
  }, [date]);

  // Fetch available slots when doctor changes
  useEffect(() => {
    if (selectedDoctor && date) {
      fetch(`/api/available_slots?doctor_name=${selectedDoctor}&date=${date}`)
        .then((res) => res.json())
        .then((data) => setTimeSlots(data))
        .catch((err) => console.error("Error fetching slots:", err));
    }
  }, [selectedDoctor, date]);

  const handleConfirm = async (e) => {
    e.preventDefault(); // Prevent page refresh

    if (!date || !selectedDoctor || !selectedTimeSlot) {
      alert("Please select a date, doctor, and time slot.");
      return;
    }

    const appointmentData = {
      appointment_date: date,
      doctor_name: selectedDoctor,
      time_slot: selectedTimeSlot,
    };

    try {
      const response = await fetch("/api/book_appointment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(appointmentData),
      });

      const result = await response.json();
      if (response.ok) {
        alert("Appointment booked successfully!");
      } else {
        alert(`Failed to book appointment: ${result.message}`);
      }
    } catch (error) {
      console.error("Error booking appointment:", error);
      alert("An error occurred while booking. Please try again.");
    }
  };

  return (
    <div className="bg-[#0098B9] min-h-screen flex flex-col">
      <Header />
      <div className="p-4">
        <h1 className="text-white text-3xl hidden md:block">Welcome User</h1>
        <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">
          <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">
            Book an Appointment
          </h1>
          <form className="mt-[20px] md:px-[100px]" onSubmit={handleConfirm}>
            {/* Date Input */}
            <div className="block md:flex md:justify-between mb-[10px]">
              <label className="text-[20px] md:text-xl font-semibold text-center">
                Date
              </label>
              <input
                type="date"
                className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
                value={date}
                onChange={(e) => setDate(e.target.value)}
              />
            </div>

            {/* Doctor Selection */}
            <div className="block md:flex md:justify-between mb-[10px]">
              <label className="text-[20px] md:text-xl font-semibold text-center">
                Doctor Name
              </label>
              <select
                className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
                value={selectedDoctor}
                onChange={(e) => setSelectedDoctor(e.target.value)}
                disabled={!doctors.length}
              >
                <option value="" disabled>
                  {doctors.length ? "Select Doctor" : "No doctors available"}
                </option>
                {doctors.map((doctor, index) => (
                  <option key={index} value={doctor}>
                    {doctor}
                  </option>
                ))}
              </select>
            </div>

            {/* Time Slots Selection */}
            <div className="block md:flex md:justify-between mb-[10px]">
              <label className="text-[20px] md:text-xl font-semibold text-center">
                Time slots
              </label>
              <select
                className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"
                value={selectedTimeSlot}
                onChange={(e) => setSelectedTimeSlot(e.target.value)}
                disabled={!timeSlots.length}
              >
                <option value="" disabled>
                  {timeSlots.length ? "Select Time Slot" : "No slots available"}
                </option>
                {timeSlots.map((slot, index) => (
                  <option key={index} value={slot}>
                    {slot.start_time} - {slot.end_time}
                  </option>
                ))}
              </select>
            </div>

            {/* Buttons */}
            <div className="flex justify-between mt-[60px]">
              <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]">
                <Link to="/home">Cancel</Link>
              </button>
              <button
                type="submit"
                className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white"
              >
                Confirm
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default BookAppointment;


























// import React from 'react'
// import Header from '../components/Header'
// import { Link } from 'react-router-dom'

// const BookAppointment = () => {

  
//   return (
//     <div className="bg-[#0098B9] min-h-screen flex flex-col">
//         <Header/>
       
//         <div className="p-4">
//         <h1 className="text-white text-3xl hidden md:block">Welcome  User</h1>
//             <div className="h-[100vh] md:h-[70vh] bg-[#ffffff] border border-cyan-300 rounded-lg mt-[20px] p-4">
//                 <h1 className="md:text-2xl text-xl font-bold text-center mb-[30px]">Book an Appoinment</h1>
//                 <form className="mt-[20px] md:px-[100px]">
//                     <div className=" block md:flex md:justify-between mb-[10px] ">
//                         <label className="text-[20px] md:text-xl font-semibold text-center">Date</label>
//                         <input type="date" className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300"/>
//                     </div>
//                     <div className=" block md:flex md:justify-between mb-[10px] ">
//                         <label className="text-[20px] md:text-xl font-semibold text-center">Doctor Name</label>
//                         <select className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300">
//                             <option name="Department" value="0" selected disabled>Select Doctor</option>
//                             <option name="Department" value="1">Dr. John Doe</option>
//                         </select>
//                     </div>
//                     <div className=" block md:flex md:justify-between mb-[10px] ">
//                         <label className="text-[20px] md:text-xl font-semibold text-center">Time slots</label>
//                         <select className="w-full md:w-[50%] h-[40px] rounded-lg border-2 border-cyan-300">
//                             <option name="Department" value="0" selected disabled>Select Department</option>
//                             <option name="Department" value="1">9.00 AM to  9.30 AM</option>
//                         </select>
//                     </div>
//                     <div className="flex justify-between mt-[60px]">
//                         <button className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]"><Link href="/Home">Cancel</Link></button>
//                         <button className="bg-[#0098B9] py-2 px-8 rounded  border-4 border-white text-white">Confirm</button>
//                     </div>
//                 </form>
    
//             </div>
//         </div>
//     </div>
//   )
// }

// export default BookAppointment





add doctor


import React, { useState } from 'react';
import AdminHeader from '../components/AdminHeader';
import { list } from "./hospitalmanagement/src/assets/images/Index";

const AddDoctor = () => {
  const [doctorName, setdoctoreName] = useState("");
  const [mailid, setmailid] = useState("");
  const [contact, setcontact] = useState("");
  const [dutydays, setdutydays] = useState([]);
  // Initialize timeSlots with snake_case keys
  const [timeSlots, setTimeSlots] = useState([{ start_time: '', end_time: '' }]);
  const [image, setImage] = useState(null);
  const [error, setError] = useState('');

  const handleCheckboxChange = (day) => {
    setdutydays((prev) =>
      prev.includes(day) ? prev.filter((d) => d !== day) : [...prev, day]
    );
  };

  const addTimeSlot = () => {
    setTimeSlots([...timeSlots, { start_time: '', end_time: '' }]);
  };

  const handleImageChange = (e) => {
    setImage(e.target.files[0]);
  };

  const handleTimeChange = (index, field, value) => {
    const updatedTimeSlots = [...timeSlots];
    updatedTimeSlots[index][field] = value;
    setTimeSlots(updatedTimeSlots);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append("doctor_name", doctorName);
      formData.append("email", mailid);
      formData.append("contact", contact);
      formData.append('working_days', JSON.stringify(dutydays));
      formData.append('time_schedules', JSON.stringify(timeSlots));
      if (image) {
        formData.append('doctorImage', image);
      }

      const res = await fetch("/api/add_doctor", {
        method: "POST",
        credentials: "include",
        body: formData,
      });

      if (!res.ok) {
        throw new Error("Error adding doctor");
      }
      alert("Doctor added Successfully");
      setdoctoreName("");
      setmailid("");
      setcontact("");
      setdutydays([]);
      setTimeSlots([{ start_time: '', end_time: '' }]);
      setImage(null);
    } catch (error) {
      console.error(error);
      alert("Internal Server error");
    }
  };
  const handleCancel = () => {
    setdoctoreName("");
    setmailid("");
    setcontact("");
    setdutydays([]);
    setTimeSlots([{ start_time: '', end_time: '' }]);
    setImage(null);
  };
  return (
    <div className="bg-[#0098B9] min-h-screen flex flex-col">
      <AdminHeader />
      <div className="p-4">
        <div className="md:h-[78vh] bg-[#ffffff] border border-cyan-300 rounded-lg p-4">
          <h1 className="text-2xl font-bold text-center">Add Doctor</h1>
          <form onSubmit={handleSubmit} className="m-4 md:mt-[20px] md:px-[100px]">
            <div className="flex justify-between mb-[10px]">
              <label className="text-[10px] md:text-xl font-semibold text-center">Doctor Name</label>
              <input 
                type="text" 
                value={doctorName}
                onChange={(e) => setdoctoreName(e.target.value)}
                className="w-[60%] md:w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300"
              />
            </div>
            <div className="flex justify-between mb-[10px]">
              <label className="text-[10px] md:text-xl font-semibold text-center">Email-ID</label>
              <input 
                type="email" 
                value={mailid}
                onChange={(e) => setmailid(e.target.value)}
                className="w-[60%] md:w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300"
              />
            </div>
            <div className="flex justify-between mb-[10px]">
              <label className="text-[10px] md:text-xl font-semibold text-center">Contact</label>
              <input 
                type="number"
                value={contact}
                onChange={(e) => setcontact(e.target.value)}
                className="w-[60%] md:w-[50%] md:h-[40px] rounded-lg border-2 border-cyan-300"
              />
            </div>
            <div className="flex flex-col md:flex-row md:justify-between mb-[10px]">
              <label className="text-[13px] md:text-xl font-semibold text-center">Duty Days</label>
              <div className="grid grid-cols-6 md:flex">
                {["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].map((day) => (
                  <label key={day} className="ml-4">
                    <input 
                      type="checkbox" 
                      checked={dutydays.includes(day)} 
                      onChange={() => handleCheckboxChange(day)} 
                    />
                    {day}
                  </label>
                ))}
              </div>
            </div>
            <div className="flex flex-col md:flex-row md:justify-between mb-[10px]">
              <label className="text-[13px] md:text-xl font-semibold text-center">Time Slot</label>
              <div>
                {timeSlots.map((slot, index) => (
                  <div key={index} className="flex gap-2">
                    <input 
                      type="time" 
                      value={slot.start_time}
                      onChange={(e) => handleTimeChange(index, 'start_time', e.target.value)}
                    />
                    <input 
                      type="time" 
                      value={slot.end_time}
                      onChange={(e) => handleTimeChange(index, 'end_time', e.target.value)}
                    />
                  </div>
                ))}
                <button type="button" className="text-cyan-600 underline" onClick={addTimeSlot}>
                  + Add Time Slot
                </button>
              </div>
            </div>
            <div className="flex justify-between mb-4">
              <label className="text-[10px] md:text-xl font-semibold text-center">Upload Image</label>
              <input type="file" accept="image/*" onChange={handleImageChange} />
            </div>
            <div className="flex justify-between md:mt-[50px]">
            <button type="button" className="bg-white py-2 px-6 rounded border-4 border-[#0098B9]"
                onClick={handleCancel}>Cancel</button>
              <button type="submit" className="bg-[#0098B9] py-2 px-8 rounded border-4 border-white text-white">
                Add
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddDoctor;




doctor list


import React, { useState, useEffect } from 'react';
import AdminHeader from '../components/AdminHeader';
import { Link } from 'react-router-dom';

const DoctorList = () => {
  const [doctors, setDoctors] = useState([]);

  useEffect(() => {
    const fetchDoctors = async () => {
      try {
        const response = await fetch("/api/getdoctor", {
          method: "GET",
          credentials: "include",
        });
        if (response.ok) {
          const data = await response.json();
          setDoctors(data);
        } else {
          console.error("Failed to fetch doctors");
        }
      } catch (error) {
        console.error(error);
      }
    };

    fetchDoctors();
  }, []);



  const handleDelete = async (doctor_name) => {
    const confirmDelete = window.confirm(`Are you sure you want to delete ${doctor_name}?`);
    if (!confirmDelete) return;

    try {
      const response = await fetch("/api/deletedoctor", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({ doctor_name }),
      });

      if (response.ok) {
        alert("Doctor deleted successfully");
        setDoctors((prevDoctors) => prevDoctors.filter((doc) => doc.doctor_name !== doctor_name));
      } else {
        alert("Failed to delete doctor");
      }
    } catch (error) {
      console.error(error);
      alert("An error occurred while deleting the doctor");
    }
  };

  return (
    <div className="bg-[#0098B9] min-h-screen flex flex-col">
      <AdminHeader />
      <div className="p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {doctors.length === 0 ? (
            <div className="col-span-full text-center py-4 text-gray-700">
              No doctors found.
            </div>
          ) : (
            doctors.map((doctor) => (
              <div
                key={doctor._id}
                className="bg-white rounded-lg border border-cyan-300 p-4 shadow-md flex flex-col"
              >
                {/* Doctor Image */}
                <div className="w-full h-48 mb-4 flex justify-center items-center">
                  {doctor.image ? (
                    <img
                      src={`data:image/png;base64,${doctor.image}`}
                      alt={doctor.doctor_name}
                      className="w-[150px] h-[200px] w-full rounded-md"
                    />
                  ) : (
                    <div className="bg-gray-200 h-full w-full rounded-md flex justify-center items-center text-gray-500">
                      No Image
                    </div>
                  )}
                </div>
                {/* Doctor Details */}
                <h2 className="text-xl font-bold mb-2">{doctor.doctor_name}</h2>
                <p className="text-gray-700 mb-1">
                  <strong>Email:</strong> {doctor.email}
                </p>
                <p className="text-gray-700 mb-1">
                  <strong>Contact:</strong> {doctor.contact}
                </p>
                <p className="text-gray-700 mb-1">
                  <strong>Duty Days:</strong> {doctor.working_days.join(", ")}
                </p>
                {/* Action Buttons */}
                <div className="mt-auto flex justify-between">
                <button
                    className="bg-red-500 text-white px-4 py-1 rounded hover:bg-red-600"
                    onClick={() => handleDelete(doctor.doctor_name)}
                  >
                    Remove
                  </button>
                  <button className="bg-yellow-500 text-white px-4 py-1 rounded hover:bg-yellow-600">
                    <Link to={`/edit_doctor/${doctor._id}`}>Edit</Link>
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default DoctorList;


